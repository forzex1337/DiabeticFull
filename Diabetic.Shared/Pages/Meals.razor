@namespace Diabetic.Shared.Pages
@page "/meals"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using Microsoft.Extensions.Options
@using Diabetic.Shared.Services
@using Diabetic.Shared.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IOptions<ApiConfiguration> ApiConfig
@inject NavigationManager Navigation

<PageTitle>Meal Management</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h2><i class="bi bi-calendar me-2"></i>Meal Management</h2>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="ShowAddMealModal">
                <i class="bi bi-plus-circle me-2"></i>Add Meal
            </button>
        </div>
    </div>

    <!-- Today's Summary -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <h5>Today's Carbs</h5>
                    <h3>@(todayTotalCarbs.ToString("F0"))g</h3>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <h5>Today's Calories</h5>
                    <h3>@(todayTotalCalories.ToString("F0"))</h3>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <h5>Insulin Units</h5>
                    <h3>@(todayTotalInsulin.ToString("F1"))</h3>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <h5>Meals Today</h5>
                    <h3>@todayMeals.Count</h3>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Add Meal Buttons -->
    <div class="row mb-4">
        <div class="col">
            <div class="card">
                <div class="card-header">
                    <h5><i class="bi bi-clock me-2"></i>Quick Add</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 col-sm-6 mb-2">
                            <button class="btn btn-outline-primary w-100" @onclick='async () => await QuickAddMeal("Breakfast")'>
                                <i class="bi bi-sunrise me-2"></i>Breakfast
                            </button>
                        </div>
                        <div class="col-md-3 col-sm-6 mb-2">
                            <button class="btn btn-outline-primary w-100" @onclick='async () => await QuickAddMeal("Lunch")'>
                                <i class="bi bi-sun me-2"></i>Lunch
                            </button>
                        </div>
                        <div class="col-md-3 col-sm-6 mb-2">
                            <button class="btn btn-outline-primary w-100" @onclick='async () => await QuickAddMeal("Dinner")'>
                                <i class="bi bi-moon me-2"></i>Dinner
                            </button>
                        </div>
                        <div class="col-md-3 col-sm-6 mb-2">
                            <button class="btn btn-outline-primary w-100" @onclick='async () => await QuickAddMeal("Snack")'>
                                <i class="bi bi-apple me-2"></i>Snack
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Meals -->
    <div class="row">
        <div class="col">
            <div class="card">
                <div class="card-header">
                    <h5><i class="bi bi-list me-2"></i>Recent Meals</h5>
                </div>
                <div class="card-body">
                    @if (!meals.Any())
                    {
                        <div class="text-center text-muted py-4">
                            <i class="bi bi-plus-circle" style="font-size: 3rem;"></i>
                            <p class="mt-2">No meals recorded yet. Add your first meal above.</p>
                        </div>
                    }
                    else
                    {
                        @foreach (var meal in meals.Take(10))
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="row align-items-center">
                                        <div class="col-md-2">
                                            <span class="badge bg-primary fs-6">@meal.MealType</span>
                                            <div class="text-muted small">@meal.MealTime.ToString("dd/MM HH:mm")</div>
                                        </div>
                                        <div class="col-md-3">
                                            <strong>@(meal.Name ?? "Unnamed Meal")</strong>
                                            @if (!string.IsNullOrEmpty(meal.Notes))
                                            {
                                                <div class="text-muted small">@meal.Notes</div>
                                            }
                                        </div>
                                        <div class="col-md-5">
                                            <div class="row text-center">
                                                <div class="col">
                                                    <div class="text-muted small">Calories</div>
                                                    <strong>@meal.TotalCalories.ToString("F0")</strong>
                                                </div>
                                                <div class="col">
                                                    <div class="text-muted small">Carbs</div>
                                                    <strong>@meal.TotalCarbs.ToString("F0")g</strong>
                                                </div>
                                                <div class="col">
                                                    <div class="text-muted small">Protein</div>
                                                    <strong>@meal.TotalProtein.ToString("F0")g</strong>
                                                </div>
                                                <div class="col">
                                                    <div class="text-muted small">Insulin</div>
                                                    <strong>@meal.EstimatedInsulinUnits.ToString("F1")u</strong>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <button class="btn btn-sm btn-outline-primary me-1" @onclick="@(() => EditMeal(meal))">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-info me-1" @onclick="@(() => ViewMealDetails(meal))">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="@(() => DeleteMeal(meal.Id))">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Meal Modal -->
<div class="modal fade @(showMealModal ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(editingMeal == null ? "Add" : "Edit") Meal</h5>
                <button type="button" class="btn-close" @onclick="CloseMealModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="currentMeal" OnValidSubmit="SaveMeal">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Meal Type</label>
                            <InputSelect @bind-Value="currentMeal.MealType" class="form-select">
                                <option value="">Select type...</option>
                                <option value="Breakfast">Breakfast</option>
                                <option value="Lunch">Lunch</option>
                                <option value="Dinner">Dinner</option>
                                <option value="Snack">Snack</option>
                            </InputSelect>
                            <ValidationMessage For="() => currentMeal.MealType" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Meal Time</label>
                            <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="currentMeal.MealTime" class="form-control" />
                            <ValidationMessage For="() => currentMeal.MealTime" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Meal Name (Optional)</label>
                        <InputText @bind-Value="currentMeal.Name" class="form-control" placeholder="e.g. Grilled chicken with rice" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Notes (Optional)</label>
                        <InputTextArea @bind-Value="currentMeal.Notes" class="form-control" rows="2" placeholder="Any additional notes..."></InputTextArea>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseMealModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-check-circle me-2"></i>Save Meal
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Meal Details Modal -->
<div class="modal fade @(showDetailsModal ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Meal Details - @(selectedMeal?.Name ?? selectedMeal?.MealType)</h5>
                <button type="button" class="btn-close" @onclick="CloseDetailsModal"></button>
            </div>
            <div class="modal-body">
                @if (selectedMeal != null)
                {
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <strong>Type:</strong> @selectedMeal.MealType<br/>
                            <strong>Time:</strong> @selectedMeal.MealTime.ToString("dd/MM/yyyy HH:mm")
                        </div>
                        <div class="col-md-6">
                            <strong>Total Calories:</strong> @selectedMeal.TotalCalories.ToString("F0")<br/>
                            <strong>Estimated Insulin:</strong> @selectedMeal.EstimatedInsulinUnits.ToString("F1") units
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col">
                            <h6>Nutritional Summary</h6>
                            <div class="row text-center">
                                <div class="col">
                                    <div class="card bg-light">
                                        <div class="card-body">
                                            <h5>@selectedMeal.TotalCarbs.ToString("F0")g</h5>
                                            <small>Carbs</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="card bg-light">
                                        <div class="card-body">
                                            <h5>@selectedMeal.TotalProtein.ToString("F0")g</h5>
                                            <small>Protein</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="card bg-light">
                                        <div class="card-body">
                                            <h5>@selectedMeal.TotalFat.ToString("F0")g</h5>
                                            <small>Fat</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="card bg-light">
                                        <div class="card-body">
                                            <h5>@selectedMeal.TotalFiber.ToString("F0")g</h5>
                                            <small>Fiber</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(selectedMeal.Notes))
                    {
                        <div class="mb-3">
                            <h6>Notes</h6>
                            <p>@selectedMeal.Notes</p>
                        </div>
                    }

                    <div class="mb-3">
                        <h6>Food Items</h6>
                        <div class="text-muted">
                            <small>Food items functionality will be added when food search is implemented</small>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseDetailsModal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Meal> meals = new();
    private List<Meal> todayMeals = new();
    private double todayTotalCarbs = 0;
    private double todayTotalCalories = 0;
    private double todayTotalInsulin = 0;
    
    private bool showMealModal = false;
    private bool showDetailsModal = false;
    private Meal currentMeal = new();
    private Meal? editingMeal;
    private Meal? selectedMeal;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is logged in
        var userId = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "userId");
        if (string.IsNullOrEmpty(userId))
        {
            // Redirect to login page if not authenticated
            Navigation.NavigateTo("/login");
            return;
        }
        
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            // Get userId from localStorage
            var userId = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "userId");
            
            if (!string.IsNullOrEmpty(userId))
            {
                // Load real meals data from API
                var startDate = DateTime.Today.AddDays(-30);
                using var httpClient = new HttpClient();
                var apiUrl = $"{ApiConfig.Value.BaseUrl}api/meals/my-meals?userId={userId}&startDate={startDate:yyyy-MM-dd}";
                var response = await httpClient.GetAsync(apiUrl);
                
                if (response.IsSuccessStatusCode)
                {
                    var mealsJson = await response.Content.ReadAsStringAsync();
                    meals = JsonSerializer.Deserialize<List<Meal>>(mealsJson, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    }) ?? new List<Meal>();
                    // Don't use mock data - show real data from database even if empty
                }
                else
                {
                    Console.WriteLine($"API call failed with status: {response.StatusCode}");
                    // Show empty list on API error when user is logged in
                    meals = new List<Meal>();
                }
            }
            else
            {
                // No userId, load mock data
                meals = GenerateMockMeals();
            }
            
            CalculateStatistics();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading meals data: {ex.Message}");
            // Fallback to mock data on error
            meals = GenerateMockMeals();
            CalculateStatistics();
        }
    }

    private void CalculateStatistics()
    {
        todayMeals = meals.Where(m => m.MealTime.Date == DateTime.Today).ToList();
        todayTotalCarbs = todayMeals.Sum(m => m.TotalCarbs);
        todayTotalCalories = todayMeals.Sum(m => m.TotalCalories);
        todayTotalInsulin = todayMeals.Sum(m => m.EstimatedInsulinUnits);
    }

    private List<Meal> GenerateMockMeals()
    {
        var mockMeals = new List<Meal>();
        var random = new Random();
        var mealTypes = new[] { "Breakfast", "Lunch", "Dinner", "Snack" };
        var mealNames = new[] { "Oatmeal with fruits", "Grilled chicken salad", "Pasta with vegetables", "Apple and nuts", "Scrambled eggs", "Sandwich" };
        
        for (int i = 0; i < 15; i++)
        {
            var carbs = random.Next(20, 80);
            mockMeals.Add(new Meal
            {
                Id = i + 1,
                UserId = "1",
                MealType = mealTypes[random.Next(mealTypes.Length)],
                MealTime = DateTime.Now.AddHours(-i * 8),
                Name = mealNames[random.Next(mealNames.Length)],
                TotalCalories = random.Next(200, 800),
                TotalCarbs = carbs,
                TotalProtein = random.Next(10, 40),
                TotalFat = random.Next(5, 30),
                TotalFiber = random.Next(2, 15),
                EstimatedInsulinUnits = carbs / 12.0,
                Notes = i % 4 == 0 ? "Felt great after this meal" : null,
                CreatedAt = DateTime.Now.AddHours(-i * 8),
                UpdatedAt = DateTime.Now.AddHours(-i * 8)
            });
        }
        
        return mockMeals.OrderByDescending(m => m.MealTime).ToList();
    }

    private async Task QuickAddMeal(string mealType)
    {
        var now = DateTime.Now;
        var suggestedTime = mealType switch
        {
            "Breakfast" => new DateTime(now.Year, now.Month, now.Day, 8, 0, 0),
            "Lunch" => new DateTime(now.Year, now.Month, now.Day, 12, 30, 0),
            "Dinner" => new DateTime(now.Year, now.Month, now.Day, 18, 30, 0),
            _ => now
        };

        // Get userId from localStorage
        var userId = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "userId");
        var userIdStr = !string.IsNullOrEmpty(userId) ? userId : "1";

        editingMeal = null;
        currentMeal = new Meal
        {
            UserId = userIdStr,
            MealType = mealType,
            MealTime = suggestedTime
        };
        showMealModal = true;
    }

    private async Task ShowAddMealModal()
    {
        // Get userId from localStorage
        var userId = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "userId");
        var userIdStr = !string.IsNullOrEmpty(userId) ? userId : "1";

        editingMeal = null;
        currentMeal = new Meal
        {
            UserId = userIdStr,
            MealTime = DateTime.Now
        };
        showMealModal = true;
    }

    private void EditMeal(Meal meal)
    {
        editingMeal = meal;
        currentMeal = new Meal
        {
            Id = meal.Id,
            UserId = meal.UserId,
            MealType = meal.MealType,
            MealTime = meal.MealTime,
            Name = meal.Name,
            Notes = meal.Notes
        };
        showMealModal = true;
    }

    private void ViewMealDetails(Meal meal)
    {
        selectedMeal = meal;
        showDetailsModal = true;
    }

    private void CloseMealModal()
    {
        showMealModal = false;
        editingMeal = null;
        currentMeal = new();
    }

    private void CloseDetailsModal()
    {
        showDetailsModal = false;
        selectedMeal = null;
    }

    private async Task SaveMeal()
    {
        try
        {
            // Get userId from localStorage
            var userId = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "userId");
            
            if (!string.IsNullOrEmpty(userId))
            {
                // Set the UserId for the meal
                currentMeal.UserId = userId;
                
                using var httpClient = new HttpClient();
                
                if (editingMeal == null)
                {
                    // Add new meal via API
                    var json = JsonSerializer.Serialize(currentMeal);
                    var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                    var apiUrl = $"{ApiConfig.Value.BaseUrl}api/meals?userId={userId}";
                    var response = await httpClient.PostAsync(apiUrl, content);
                    
                    if (response.IsSuccessStatusCode)
                    {
                        // Reload data from server
                        await LoadData();
                    }
                    else
                    {
                        Console.WriteLine($"Error saving meal to API: {response.StatusCode}");
                        // Don't add to local list - show error instead
                    }
                }
                else
                {
                    // Update existing meal via API
                    var json = JsonSerializer.Serialize(currentMeal);
                    var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                    var apiUrl = $"{ApiConfig.Value.BaseUrl}api/meals/{currentMeal.Id}";
                    var response = await httpClient.PutAsync(apiUrl, content);
                    
                    if (response.IsSuccessStatusCode)
                    {
                        // Reload data from server
                        await LoadData();
                    }
                    else
                    {
                        Console.WriteLine($"Error updating meal via API: {response.StatusCode}");
                        // Don't update local list - show error instead
                    }
                }
            }
            else
            {
                // No userId, use mock behavior
                if (editingMeal == null)
                {
                    currentMeal.Id = meals.Any() ? meals.Max(m => m.Id) + 1 : 1;
                    currentMeal.CreatedAt = DateTime.Now;
                    currentMeal.UpdatedAt = DateTime.Now;
                    meals.Insert(0, currentMeal);
                }
                else
                {
                    var index = meals.FindIndex(m => m.Id == currentMeal.Id);
                    if (index >= 0)
                    {
                        meals[index].MealType = currentMeal.MealType;
                        meals[index].MealTime = currentMeal.MealTime;
                        meals[index].Name = currentMeal.Name;
                        meals[index].Notes = currentMeal.Notes;
                        meals[index].UpdatedAt = DateTime.Now;
                    }
                }
                CalculateStatistics();
            }
            
            CloseMealModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving meal: {ex.Message}");
        }
    }

    private async Task DeleteMeal(int id)
    {
        try
        {
            // Get userId from localStorage
            var userId = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "userId");
            
            if (!string.IsNullOrEmpty(userId))
            {
                // Delete via API
                using var httpClient = new HttpClient();
                var apiUrl = $"{ApiConfig.Value.BaseUrl}api/meals/{id}";
                var response = await httpClient.DeleteAsync(apiUrl);
                
                if (response.IsSuccessStatusCode)
                {
                    // Reload data from server
                    await LoadData();
                }
                else
                {
                    Console.WriteLine($"Error deleting meal via API: {response.StatusCode}");
                    // Don't modify local list - show error instead
                }
            }
            else
            {
                // No userId, use mock behavior
                meals.RemoveAll(m => m.Id == id);
                CalculateStatistics();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting meal: {ex.Message}");
        }
    }

}