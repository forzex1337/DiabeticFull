@namespace Diabetic.Shared.Pages
@page "/register"
@using Diabetic.Shared.Models
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using System.Text
@using Microsoft.Extensions.Options
@using Diabetic.Shared.Services
@inject ILogger<Register> Logger
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IOptions<ApiConfiguration> ApiConfig

<PageTitle>Register - Diabetic</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h2><i class="bi bi-person-plus me-2"></i>Rejestracja</h2>
            <p class="text-muted">Utwórz nowe konto w aplikacji Diabetic</p>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-lg-8 col-md-10">
            <div class="card">
                <div class="card-header">
                    <h5><i class="bi bi-person-plus me-2"></i>Zarejestruj się</h5>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @ErrorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(SuccessMessage))
                    {
                        <div class="alert alert-success" role="alert">
                            @SuccessMessage
                        </div>
                    }

                    <EditForm Model="RegisterModel" OnValidSubmit="HandleRegister">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="firstName" class="form-label">Imię</label>
                                    <InputText id="firstName" class="form-control" @bind-Value="RegisterModel.FirstName" />
                                    <ValidationMessage For="() => RegisterModel.FirstName" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="lastName" class="form-label">Nazwisko</label>
                                    <InputText id="lastName" class="form-control" @bind-Value="RegisterModel.LastName" />
                                    <ValidationMessage For="() => RegisterModel.LastName" class="text-danger" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="form-group mb-3">
                            <label for="registerEmail" class="form-label">Email</label>
                            <InputText id="registerEmail" class="form-control" @bind-Value="RegisterModel.Email" autocomplete="username" />
                            <ValidationMessage For="() => RegisterModel.Email" class="text-danger" />
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="registerPassword" class="form-label">Hasło</label>
                                    <InputText id="registerPassword" type="password" class="form-control" @bind-Value="RegisterModel.Password" autocomplete="new-password" />
                                    <ValidationMessage For="() => RegisterModel.Password" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="confirmPassword" class="form-label">Potwierdź hasło</label>
                                    <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="RegisterModel.ConfirmPassword" autocomplete="new-password" />
                                    <ValidationMessage For="() => RegisterModel.ConfirmPassword" class="text-danger" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="form-group mb-3">
                            <label for="diabetesType" class="form-label">Typ cukrzycy</label>
                            <InputSelect id="diabetesType" class="form-select" @bind-Value="RegisterModel.DiabetesType">
                                <option value="">Wybierz typ cukrzycy</option>
                                <option value="Type1">Typ 1</option>
                                <option value="Type2">Typ 2</option>
                                <option value="Gestational">Ciążowa</option>
                                <option value="Other">Inny</option>
                            </InputSelect>
                            <ValidationMessage For="() => RegisterModel.DiabetesType" class="text-danger" />
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="dateOfBirth" class="form-label">Data urodzenia</label>
                                    <InputDate id="dateOfBirth" class="form-control" @bind-Value="RegisterModel.DateOfBirth" />
                                    <ValidationMessage For="() => RegisterModel.DateOfBirth" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="gender" class="form-label">Płeć</label>
                                    <InputSelect id="gender" class="form-select" @bind-Value="RegisterModel.Gender">
                                        <option value="">Wybierz płeć</option>
                                        <option value="Male">Mężczyzna</option>
                                        <option value="Female">Kobieta</option>
                                        <option value="Other">Inna</option>
                                    </InputSelect>
                                    <ValidationMessage For="() => RegisterModel.Gender" class="text-danger" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="height" class="form-label">Wzrost (cm)</label>
                                    <InputNumber id="height" class="form-control" @bind-Value="RegisterModel.Height" />
                                    <ValidationMessage For="() => RegisterModel.Height" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="weight" class="form-label">Waga (kg)</label>
                                    <InputNumber id="weight" class="form-control" @bind-Value="RegisterModel.Weight" />
                                    <ValidationMessage For="() => RegisterModel.Weight" class="text-danger" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="d-grid gap-2 mb-3">
                            <button type="submit" class="btn btn-success btn-lg" disabled="@IsLoading">
                                @if (IsLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Rejestracja...</span>
                                }
                                else
                                {
                                    <span>Zarejestruj się</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    <hr>
                    
                    <div class="text-center">
                        <p>Lub użyj:</p>
                        <div class="d-grid gap-2">
                            <button class="btn btn-outline-danger" @onclick='() => HandleOAuthLogin("Google")' disabled="@IsLoading">
                                <i class="fab fa-google me-2"></i> Google
                            </button>
                            <button class="btn btn-outline-primary" @onclick='() => HandleOAuthLogin("Facebook")' disabled="@IsLoading">
                                <i class="fab fa-facebook-f me-2"></i> Facebook
                            </button>
                        </div>
                    </div>
                    
                    <hr>
                    
                    <div class="text-center">
                        <p>Masz już konto? <a href="/login" class="btn btn-link p-0">Zaloguj się</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public bool IsLoading { get; private set; } = false;
    public string? ErrorMessage { get; private set; }
    public string? SuccessMessage { get; private set; }

    public RegisterInputModel RegisterModel { get; set; } = new();

    public class RegisterInputModel
    {
        [Required(ErrorMessage = "Email jest wymagany.")]
        [EmailAddress(ErrorMessage = "Nieprawidłowy format email.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Hasło jest wymagane.")]
        [StringLength(100, ErrorMessage = "{0} musi mieć co najmniej {2} i maksymalnie {1} znaków.", MinimumLength = 6)]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Potwierdzenie hasła jest wymagane.")]
        [Compare("Password", ErrorMessage = "Hasła nie są identyczne.")]
        public string ConfirmPassword { get; set; } = "";

        public string? FirstName { get; set; }
        public string? LastName { get; set; }

        [Required(ErrorMessage = "Typ cukrzycy jest wymagany.")]
        public string DiabetesType { get; set; } = "";

        public DateTime? DateOfBirth { get; set; }
        public string? Gender { get; set; }
        
        [Range(50, 300, ErrorMessage = "Wzrost musi być między 50 a 300 cm.")]
        public double? Height { get; set; }
        
        [Range(10, 500, ErrorMessage = "Waga musi być między 10 a 500 kg.")]
        public double? Weight { get; set; }
    }

    private async Task HandleRegister()
    {
        IsLoading = true;
        ErrorMessage = null;
        StateHasChanged();

        try
        {
            var registerData = new
            {
                Email = RegisterModel.Email,
                Password = RegisterModel.Password,
                FirstName = RegisterModel.FirstName,
                LastName = RegisterModel.LastName,
                DiabetesType = RegisterModel.DiabetesType,
                DateOfBirth = RegisterModel.DateOfBirth,
                Gender = RegisterModel.Gender,
                Height = RegisterModel.Height,
                Weight = RegisterModel.Weight
            };

            var json = JsonSerializer.Serialize(registerData);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            // Direct call to Diabetic API
            using var httpClient = new HttpClient();
            var apiUrl = $"{ApiConfig.Value.BaseUrl}api/auth/register";
            var response = await httpClient.PostAsync(apiUrl, content);
            
            if (response.IsSuccessStatusCode)
            {
                SuccessMessage = "Konto zostało utworzone i zalogowano pomyślnie!";
                IsLoading = false;
                StateHasChanged();
                
                // Parse response and save userId
                var responseContent = await response.Content.ReadAsStringAsync();
                var registerResult = JsonSerializer.Deserialize<JsonElement>(responseContent);
                if (registerResult.TryGetProperty("userId", out var userIdProp))
                {
                    var userId = userIdProp.GetString();
                    if (!string.IsNullOrEmpty(userId))
                    {
                        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userId", userId);
                    }
                }
                
                // Wait a moment then redirect to home with force reload to refresh authentication state
                await Task.Delay(1500);
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                try
                {
                    var errorData = JsonSerializer.Deserialize<JsonElement>(errorResponse);
                    if (errorData.TryGetProperty("message", out var messageProperty))
                    {
                        ErrorMessage = messageProperty.GetString();
                    }
                    else
                    {
                        ErrorMessage = "Błąd podczas rejestracji.";
                    }
                }
                catch
                {
                    ErrorMessage = "Błąd podczas rejestracji.";
                }
                IsLoading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Registration error");
            ErrorMessage = "Wystąpił błąd podczas rejestracji.";
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleOAuthLogin(string provider)
    {
        IsLoading = true;
        ErrorMessage = null;
        StateHasChanged();

        try
        {
            // Redirect to external login
            await JSRuntime.InvokeVoidAsync("location.assign", $"/Identity/Account/ExternalLogin?provider={provider}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "OAuth login error");
            ErrorMessage = $"Wystąpił błąd podczas logowania przez {provider}.";
            IsLoading = false;
            StateHasChanged();
        }
    }
}