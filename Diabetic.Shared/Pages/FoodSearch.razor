@namespace Diabetic.Shared.Pages
@page "/food-search"
@using Diabetic.Shared.Models
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@inject HttpClient Http

<PageTitle>Food Search</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h2><i class="bi bi-search me-2"></i>Food Search</h2>
            <p class="text-muted">Search for food products and their nutritional information</p>
        </div>
    </div>

    <!-- Search Section -->
    <div class="row mb-4">
        <div class="col">
            <div class="card">
                <div class="card-header">
                    <h5><i class="bi bi-search me-2"></i>Search Food Products</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="input-group">
                                <input type="text" class="form-control" @bind="searchQuery" @onkeypress="OnSearchKeyPress" 
                                       placeholder="Search for food products..." />
                                <button class="btn btn-primary" @onclick="SearchFood" disabled="@isSearching">
                                    @if (isSearching)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-search me-2"></i>
                                    }
                                    Search
                                </button>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <button class="btn btn-outline-success w-100" @onclick="ScanBarcode">
                                <i class="bi bi-upc-scan me-2"></i>Scan Barcode
                            </button>
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(searchMessage))
                    {
                        <div class="alert alert-info mt-3">
                            @searchMessage
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Categories -->
    <div class="row mb-4">
        <div class="col">
            <div class="card">
                <div class="card-header">
                    <h5><i class="bi bi-grid me-2"></i>Quick Categories</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-2 col-sm-4 col-6 mb-2">
                            <button class="btn btn-outline-primary w-100" @onclick='() => QuickSearch("fruits")'>
                                <i class="bi bi-apple me-2"></i>Fruits
                            </button>
                        </div>
                        <div class="col-md-2 col-sm-4 col-6 mb-2">
                            <button class="btn btn-outline-primary w-100" @onclick='() => QuickSearch("vegetables")'>
                                <i class="bi bi-tree me-2"></i>Vegetables
                            </button>
                        </div>
                        <div class="col-md-2 col-sm-4 col-6 mb-2">
                            <button class="btn btn-outline-primary w-100" @onclick='() => QuickSearch("bread")'>
                                <i class="bi bi-basket me-2"></i>Bread
                            </button>
                        </div>
                        <div class="col-md-2 col-sm-4 col-6 mb-2">
                            <button class="btn btn-outline-primary w-100" @onclick='() => QuickSearch("dairy")'>
                                <i class="bi bi-cup me-2"></i>Dairy
                            </button>
                        </div>
                        <div class="col-md-2 col-sm-4 col-6 mb-2">
                            <button class="btn btn-outline-primary w-100" @onclick='() => QuickSearch("meat")'>
                                <i class="bi bi-egg me-2"></i>Protein
                            </button>
                        </div>
                        <div class="col-md-2 col-sm-4 col-6 mb-2">
                            <button class="btn btn-outline-primary w-100" @onclick='() => QuickSearch("pasta")'>
                                <i class="bi bi-archive me-2"></i>Grains
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Search Results -->
    @if (searchResults.Any())
    {
        <div class="row">
            <div class="col">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="bi bi-list me-2"></i>Search Results (@searchResults.Count items)</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @foreach (var food in searchResults)
                            {
                                <div class="col-md-6 col-lg-4 mb-3">
                                    <div class="card h-100">
                                        @if (!string.IsNullOrEmpty(food.ImageUrl))
                                        {
                                            <img src="@food.ImageUrl" class="card-img-top" style="height: 150px; object-fit: cover;" alt="@food.Name" />
                                        }
                                        else
                                        {
                                            <div class="card-img-top d-flex justify-content-center align-items-center bg-light" style="height: 150px;">
                                                <i class="bi bi-image text-muted" style="font-size: 2rem;"></i>
                                            </div>
                                        }
                                        <div class="card-body">
                                            <h6 class="card-title">@food.Name</h6>
                                            @if (!string.IsNullOrEmpty(food.Brand))
                                            {
                                                <p class="card-text small text-muted">@food.Brand</p>
                                            }
                                            
                                            <div class="row text-center small">
                                                <div class="col-6">
                                                    <div class="text-muted">Calories</div>
                                                    <strong>@food.CaloriesPer100g.ToString("F0")</strong>
                                                </div>
                                                <div class="col-6">
                                                    <div class="text-muted">Carbs</div>
                                                    <strong>@food.CarbsPer100g.ToString("F0")g</strong>
                                                </div>
                                            </div>
                                            
                                            <div class="row text-center small mt-2">
                                                <div class="col-6">
                                                    <div class="text-muted">Protein</div>
                                                    <strong>@food.ProteinPer100g.ToString("F0")g</strong>
                                                </div>
                                                <div class="col-6">
                                                    <div class="text-muted">Fat</div>
                                                    <strong>@food.FatPer100g.ToString("F0")g</strong>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="card-footer">
                                            <button class="btn btn-primary btn-sm w-100" @onclick="@(() => ViewFoodDetails(food))">
                                                <i class="bi bi-eye me-2"></i>View Details
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (hasSearched && !isSearching)
    {
        <div class="row">
            <div class="col">
                <div class="card">
                    <div class="card-body text-center text-muted py-5">
                        <i class="bi bi-search" style="font-size: 3rem;"></i>
                        <p class="mt-2">No food products found for your search.</p>
                        <p>Try different keywords or use the category buttons above.</p>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Food Details Modal -->
<div class="modal fade @(showDetailsModal ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(selectedFood?.Name ?? "Food Details")</h5>
                <button type="button" class="btn-close" @onclick="CloseDetailsModal"></button>
            </div>
            <div class="modal-body">
                @if (selectedFood != null)
                {
                    <div class="row">
                        @if (!string.IsNullOrEmpty(selectedFood.ImageUrl))
                        {
                            <div class="col-md-4">
                                <img src="@selectedFood.ImageUrl" class="img-fluid rounded" alt="@selectedFood.Name" />
                            </div>
                        }
                        <div class="col-md-8">
                            <h4>@selectedFood.Name</h4>
                            @if (!string.IsNullOrEmpty(selectedFood.Brand))
                            {
                                <p class="text-muted">Brand: @selectedFood.Brand</p>
                            }
                            @if (!string.IsNullOrEmpty(selectedFood.Description))
                            {
                                <p>@selectedFood.Description</p>
                            }
                            @if (!string.IsNullOrEmpty(selectedFood.Barcode))
                            {
                                <p><small>Barcode: @selectedFood.Barcode</small></p>
                            }
                        </div>
                    </div>

                    <hr />

                    <h5>Nutritional Information (per 100g)</h5>
                    <div class="row">
                        <div class="col-md-3 col-6">
                            <div class="card bg-primary text-white text-center">
                                <div class="card-body">
                                    <h4>@selectedFood.CaloriesPer100g.ToString("F0")</h4>
                                    <small>Calories</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 col-6">
                            <div class="card bg-warning text-white text-center">
                                <div class="card-body">
                                    <h4>@selectedFood.CarbsPer100g.ToString("F1")g</h4>
                                    <small>Carbohydrates</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 col-6">
                            <div class="card bg-success text-white text-center">
                                <div class="card-body">
                                    <h4>@selectedFood.ProteinPer100g.ToString("F1")g</h4>
                                    <small>Protein</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 col-6">
                            <div class="card bg-info text-white text-center">
                                <div class="card-body">
                                    <h4>@selectedFood.FatPer100g.ToString("F1")g</h4>
                                    <small>Fat</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-md-3 col-6">
                            <div class="card bg-light text-center">
                                <div class="card-body">
                                    <h5>@selectedFood.SugarsPer100g.ToString("F1")g</h5>
                                    <small>Sugars</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 col-6">
                            <div class="card bg-light text-center">
                                <div class="card-body">
                                    <h5>@selectedFood.FiberPer100g.ToString("F1")g</h5>
                                    <small>Fiber</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 col-6">
                            <div class="card bg-light text-center">
                                <div class="card-body">
                                    <h5>@selectedFood.SodiumPer100g.ToString("F0")mg</h5>
                                    <small>Sodium</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 col-6">
                            <div class="card bg-light text-center">
                                <div class="card-body">
                                    <h5>@(selectedFood.GlycemicIndex?.ToString() ?? "N/A")</h5>
                                    <small>Glycemic Index</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mt-3">
                        <small class="text-muted">
                            Source: @selectedFood.Source
                            @if (selectedFood.IsVerified)
                            {
                                <span class="badge bg-success ms-2">Verified</span>
                            }
                        </small>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="AddToMeal">
                    <i class="bi bi-plus-circle me-2"></i>Add to Meal
                </button>
                <button type="button" class="btn btn-secondary" @onclick="CloseDetailsModal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Barcode Scanner Modal (Placeholder) -->
<div class="modal fade @(showScannerModal ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Barcode Scanner</h5>
                <button type="button" class="btn-close" @onclick="CloseScannerModal"></button>
            </div>
            <div class="modal-body text-center">
                <div class="py-5">
                    <i class="bi bi-camera" style="font-size: 4rem; color: #ccc;"></i>
                    <h4 class="mt-3">Camera View</h4>
                    <p class="text-muted">Barcode scanning will be implemented for mobile devices</p>
                    
                    <div class="mt-4">
                        <label class="form-label">Or enter barcode manually:</label>
                        <div class="input-group">
                            <input type="text" class="form-control" @bind="manualBarcode" placeholder="Enter barcode..." />
                            <button class="btn btn-primary" @onclick="SearchByBarcode">
                                <i class="bi bi-search"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseScannerModal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string searchQuery = string.Empty;
    private string manualBarcode = string.Empty;
    private string searchMessage = string.Empty;
    private bool isSearching = false;
    private bool hasSearched = false;
    private bool showDetailsModal = false;
    private bool showScannerModal = false;
    
    private List<FoodProduct> searchResults = new();
    private FoodProduct? selectedFood;

    private async Task SearchFood()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
            return;

        isSearching = true;
        searchMessage = "Searching...";
        hasSearched = true;

        try
        {
            // Call OpenFoodFacts API directly
            var url = $"https://world.openfoodfacts.org/cgi/search.pl?search_terms={Uri.EscapeDataString(searchQuery)}&search_simple=1&action=process&json=1&page_size=20";
            var response = await Http.GetFromJsonAsync<OpenFoodFactsSearchResponse>(url);
            
            if (response?.Products != null)
            {
                searchResults = response.Products.Where(p => p != null && !string.IsNullOrWhiteSpace(p.ProductName))
                    .Select(p => MapToFoodProduct(p))
                    .Where(p => p != null)
                    .Cast<FoodProduct>()
                    .ToList();
            }
            else
            {
                searchResults = new List<FoodProduct>();
            }
            
            searchMessage = searchResults.Any() ? 
                $"Found {searchResults.Count} products" : 
                "No products found. Try different keywords.";
        }
        catch (Exception ex)
        {
            searchMessage = "Error searching for food products. Please try again.";
            Console.WriteLine($"Search error: {ex.Message}");
        }
        finally
        {
            isSearching = false;
        }
    }

    private async Task QuickSearch(string category)
    {
        searchQuery = category;
        await SearchFood();
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchFood();
        }
    }

    private void ScanBarcode()
    {
        showScannerModal = true;
    }

    private async Task SearchByBarcode()
    {
        if (string.IsNullOrWhiteSpace(manualBarcode))
            return;

        CloseScannerModal();
        
        try
        {
            // Call OpenFoodFacts API directly for barcode lookup
            var url = $"https://world.openfoodfacts.org/api/v0/product/{manualBarcode}.json";
            var response = await Http.GetFromJsonAsync<OpenFoodFactsResponse>(url);
            
            var product = response?.Product != null && response.Status == 1 
                ? MapToFoodProduct(response.Product, manualBarcode) 
                : null;
            
            if (product != null)
            {
                searchResults = new List<FoodProduct> { product };
                searchMessage = "Product found by barcode";
                hasSearched = true;
            }
            else
            {
                searchResults.Clear();
                searchMessage = "No product found with this barcode";
                hasSearched = true;
            }
        }
        catch (Exception ex)
        {
            searchMessage = "Error looking up barcode. Please try again.";
            Console.WriteLine($"Barcode lookup error: {ex.Message}");
        }
        
        manualBarcode = string.Empty;
    }

    private void ViewFoodDetails(FoodProduct food)
    {
        selectedFood = food;
        showDetailsModal = true;
    }

    private void CloseDetailsModal()
    {
        showDetailsModal = false;
        selectedFood = null;
    }

    private void CloseScannerModal()
    {
        showScannerModal = false;
        manualBarcode = string.Empty;
    }

    private async Task AddToMeal()
    {
        // TODO: Implement adding food to meal
        // This would typically navigate to meal creation or show a quantity picker
        CloseDetailsModal();
        searchMessage = "Feature to add to meal will be implemented";
    }

    private static FoodProduct? MapToFoodProduct(OpenFoodFactsProduct product, string barcode = "")
    {
        if (string.IsNullOrWhiteSpace(product.ProductName))
            return null;

        return new FoodProduct
        {
            Name = product.ProductName.Trim(),
            Brand = product.Brands?.Split(',').FirstOrDefault()?.Trim(),
            Barcode = barcode ?? product.Code ?? "",
            Description = product.GenericName?.Trim(),
            ImageUrl = GetBestImageUrl(product),
            CaloriesPer100g = ParseNutriment(product.Nutriments?.EnergyKcal100g),
            CarbsPer100g = ParseNutriment(product.Nutriments?.Carbohydrates100g),
            SugarsPer100g = ParseNutriment(product.Nutriments?.Sugars100g),
            FiberPer100g = ParseNutriment(product.Nutriments?.Fiber100g),
            ProteinPer100g = ParseNutriment(product.Nutriments?.Proteins100g),
            FatPer100g = ParseNutriment(product.Nutriments?.Fat100g),
            SodiumPer100g = ParseNutriment(product.Nutriments?.Sodium100g) * 1000, // Convert g to mg
            Source = "OpenFoodFacts",
            OpenFoodFactsId = barcode ?? product.Code,
            IsVerified = true,
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow
        };
    }

    private static double ParseNutriment(object? value)
    {
        if (value == null) return 0;
        
        var stringValue = value.ToString();
        if (string.IsNullOrWhiteSpace(stringValue)) return 0;
        
        if (double.TryParse(stringValue.Replace(',', '.'), 
            System.Globalization.NumberStyles.Float, 
            System.Globalization.CultureInfo.InvariantCulture, 
            out double result))
        {
            return Math.Max(0, result);
        }
        
        return 0;
    }

    private static string? GetBestImageUrl(OpenFoodFactsProduct product)
    {
        if (!string.IsNullOrWhiteSpace(product.ImageFrontUrl))
            return product.ImageFrontUrl;
        
        if (!string.IsNullOrWhiteSpace(product.ImageUrl))
            return product.ImageUrl;
        
        if (!string.IsNullOrWhiteSpace(product.ImageSmallUrl))
            return product.ImageSmallUrl;
        
        return null;
    }

    // OpenFoodFacts API Response classes
    public class OpenFoodFactsResponse
    {
        [JsonPropertyName("status")]
        public int Status { get; set; }
        
        [JsonPropertyName("product")]
        public OpenFoodFactsProduct? Product { get; set; }
    }

    public class OpenFoodFactsSearchResponse
    {
        [JsonPropertyName("products")]
        public List<OpenFoodFactsProduct?>? Products { get; set; }
        
        [JsonPropertyName("count")]
        public int Count { get; set; }
    }

    public class OpenFoodFactsProduct
    {
        [JsonPropertyName("code")]
        public string? Code { get; set; }
        
        [JsonPropertyName("product_name")]
        public string? ProductName { get; set; }
        
        [JsonPropertyName("brands")]
        public string? Brands { get; set; }
        
        [JsonPropertyName("generic_name")]
        public string? GenericName { get; set; }
        
        [JsonPropertyName("image_url")]
        public string? ImageUrl { get; set; }
        
        [JsonPropertyName("image_front_url")]
        public string? ImageFrontUrl { get; set; }
        
        [JsonPropertyName("image_small_url")]
        public string? ImageSmallUrl { get; set; }
        
        [JsonPropertyName("nutriments")]
        public OpenFoodFactsNutriments? Nutriments { get; set; }
    }

    public class OpenFoodFactsNutriments
    {
        [JsonPropertyName("energy-kcal_100g")]
        public object? EnergyKcal100g { get; set; }
        
        [JsonPropertyName("carbohydrates_100g")]
        public object? Carbohydrates100g { get; set; }
        
        [JsonPropertyName("sugars_100g")]
        public object? Sugars100g { get; set; }
        
        [JsonPropertyName("fiber_100g")]
        public object? Fiber100g { get; set; }
        
        [JsonPropertyName("proteins_100g")]
        public object? Proteins100g { get; set; }
        
        [JsonPropertyName("fat_100g")]
        public object? Fat100g { get; set; }
        
        [JsonPropertyName("sodium_100g")]
        public object? Sodium100g { get; set; }
    }
}